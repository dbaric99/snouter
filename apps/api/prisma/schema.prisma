// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum State {
  NEW
  USED
  DAMAGED
}

model User {
  id              Int       @id @default(autoincrement())
  firstName       String?
  lastName        String?
  username        String    @unique
  email           String    @unique
  salt            String
  password        String
  token           String?
  role            Role      @default(USER)
  phoneNumber     String?
  address         Address?  @relation(fields: [addressId], references: [id])
  addressId       Int?
  products        Product[]
  profileImageUrl String?
  softDelete      Boolean   @default(false)
}

model Address {
  id           Int    @id @default(autoincrement())
  street       String
  streetNumber Int
  users        User[]
  city         City   @relation(fields: [cityId], references: [id])
  cityId       Int
}

model City {
  id        Int       @id @default(autoincrement())
  name      String
  zip       String    @unique
  addresses Address[]
  county    County    @relation(fields: [countyId], references: [id])
  countyId  Int
}

model County {
  id     Int    @id @default(autoincrement())
  name   String @unique
  cities City[]
}

model Product {
  id            Int                    @id @default(autoincrement())
  name          String
  description   String?
  price         Float
  createdAt     DateTime               @default(now())
  updatedAt     DateTime?
  state         State
  isSold        Boolean                @default(false)
  subcategory   Subcategory            @relation(fields: [subcategoryId], references: [id])
  subcategoryId Int
  seller        User                   @relation(fields: [sellerId], references: [id])
  sellerId      Int
  productSpecs  ProductSpecification[]
  images        String[]
}

model Category {
  id            Int                     @id @default(autoincrement())
  name          String                  @unique
  subcategories Subcategory[]
  categorySpecs CategorySpecification[]
}

model Subcategory {
  id               Int                        @id @default(autoincrement())
  name             String                     @unique
  products         Product[]
  category         Category                   @relation(fields: [categoryId], references: [id])
  categoryId       Int
  subcategorySpecs SubcategorySpecification[]
}

model CategorySpecification {
  id                   Int                    @id @default(autoincrement())
  name                 String
  category             Category               @relation(fields: [categoryId], references: [id])
  categoryId           Int
  ProductSpecification ProductSpecification[]
}

model SubcategorySpecification {
  id                   Int                    @id @default(autoincrement())
  name                 String
  subcategory          Subcategory            @relation(fields: [subcategoryId], references: [id])
  subcategoryId        Int
  ProductSpecification ProductSpecification[]
}

model ProductSpecification {
  id                         Int                       @id @default(autoincrement())
  value                      String
  product                    Product                   @relation(fields: [productId], references: [id])
  productId                  Int
  categorySpec               CategorySpecification?    @relation(fields: [categorySpecificationId], references: [id])
  categorySpecificationId    Int?
  subcategorySpec            SubcategorySpecification? @relation(fields: [subcategorySpecificationId], references: [id])
  subcategorySpecificationId Int?
  isAdditional               Boolean                   @default(false)
}
